# The ASR Java Docker images EXPOSE port 8080, and operations/deploy code typically expects the service to
# listen on these ports. As such, the server.port property which defines the port, the embedded server listens,
# should usually match.
#
# However, if you wish to change ports for local development:
#
#  If you want to run without Docker (e.g. directly from your IDE) then simply set the values in
#    application-test.properties. Be aware that once you've done this, any attempt to run with Docker locally will need
#    to publish (and thereby implicitly EXPOSE) the ports you have defined, rather than 8080, on the command
#    line. Example:
#        $ docker run ... -p 9080:9080
#
# 2. If you only care about changing ports when running via Docker, then you can leave embedded Tomcat listening on 8080
#    inside the container and publish to different ports (i.e. remap them) on the Docker command line
#    or in a docker-compose.yaml file.
#
#    Command line example:
#        $ docker run ... -p 9080:8080 -p 9082:8082
#
#    docker-compose.yaml example
#            ports:
#             - "9080:8080"
server.port=8080
# Making actuator endpoints opt-in
management.endpoints.enabled-by-default=false
#The following controls which endpoints are created and their bean exists in the application context
# Enabling the endpoint doesn't automatically make them accessible remotely i.e. via JMX of HTTP. 
# Inorder for an actuator endpoint to be accessible they need to be exposed using the following
#management.endpoints.jmx.exposure.include=health
# read more about actuator endpoints at https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html
management.endpoint.health.enabled=true
management.endpoint.env.enabled=true
management.endpoint.configprops.enabled=true

#In deployment this value will be set via command line argument
#The 'test' profile is for local development, and is never deployed
spring.profiles.active=test
#In deployment this value will be set via command line argument
#To create region specific property values use ${asr.environment.region.short} as a substitution token
#Uncomment and set a value (an1, ew1, ue1) for local testing if needed
#asr.environment.region.short=
logging.level.root=INFO
com.adobe.asr.service-name=xdmviewer
#This client ID is the x-api-key header value included in calls made to other services by any connectors you use.
#You must request this client ID (or select and request a different one) from IMS.
#You may also need to have services you depend on white list this client ID.
com.adobe.asr.service-client-id=xdmviewer1
com.adobe.asr.telemetry.telemetry-project-name = xdmviewer
# These are the headers which can be added by the adobe.io gateway which should not be logged (PII)
com.adobe.asr.logging-headers-blacklist=x-gw-ims-email, x-gw-ims-display-name, x-gw-ims-first-name, x-gw-ims-last-name, x-gw-ims-user-id
com.adobe.xdmviewer.message=Everything

#-- spring MVC multipart limits configuration -
#specifies the directory where uploaded files will be stored. When not specified, a temporary directory will be used.
#spring.servlet.multipart.location=
#specifies the maximum size permitted for uploaded files. -1 means unlimited
spring.servlet.multipart.max-file-size=-1
#specifies the maximum size allowed for multipart/form-data requests. -1 means unlimited.
spring.servlet.multipart.max-request-size=-1
#specifies the size threshold after which files will be written to disk. The default value is 0.
spring.servlet.multipart.file-size-threshold=0

# -- Jersey multipart limits configuration --
# Enable or disable multi part configuration. Defaults to false. Settings below only apply if this is true
com.adobe.asr.enable-multipart-config=false
#The maximum size allowed for uploaded files. Default -1 is unlimited.
com.adobe.asr.multipart-max-file-size=-1
#The maximum size allowed for multipart/form-data requests. Default -1 is unlimited.
com.adobe.asr.multipart-max-request-size=-1
#The size threshold after which the file will be written to disk. Default 0 is all files.
com.adobe.asr.multipart-file-size-threshold=0
#The directory location where files will be stored. Default "".
com.adobe.asr.multipart-location=

# -- Tomcat configuration --
# Set Tomcat max swallow size (in bytes). Defaults to 2MB, recommended to set smaller if enabling multipart. The maximum number of request body bytes that will be swallowed by Tomcat for an aborted upload. -1 is unlimited.
server.tomcat.max-swallow-size=-1

# Cache to use for IMS connector service token validation, options currently include NO_CACHE and MEMORY_CACHE
com.adobe.ims.cache-type=NO_CACHE
# Cache expiration time in seconds - tune for the needs of your service
com.adobe.ims.cache-expiration=600
# Cache size limit - tune for the needs of your service
com.adobe.ims.cache-max-items=10000


